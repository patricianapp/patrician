{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to our documentation! ( Developers : For info on contributing, including a glossary of the tools and frameworks we use, check out our developer guide.) Below is our user FAQ. If your question is not answered here, you can leave a post in our forum and we'll help you out. Basics What is Patrician? Patrician is a music profile app that lets you manage a collection of all the albums, EPs, and singles that you own, physical and/or digital. You can customize and share these profiles with anyone, and they will also have the ability to recommend albums to you. These are added to your queue, which you can then add to your collection. Each Patrician profile has powerful search options that allow you to narrow down your collection in a multitude of ways. You can filter and sort by release date, play count, ratings, custom tags and fields, and even compare your collection with others on the site. Collection Adding to Your Collection Spotify With Spotify integration, you can automatically or selectively import from your Saved Albums. You can also enable Spotify Sync, which ensures that any albums added to your Collection are also saved in your Spotify library. In addition, you can manually add items from your playlists and recent listens using the Import page. To authenticate, go to **Account** > **Login with Spotify**, and once you've logged in you will see these settings: - **Import Now**: Import all Saved Albums from Spotify into your Collection. You can then choose which albums to import, or enable Sync which will automatically import everything. - **Auto Sync**: Enables two-way synchronization between Spotify and Patrician. This will occur periodically, so your libraries are always up-to-date. - **Recommendations**: Recommend recently listened albums to add to your library. These will show up on your home page. Last.fm With Last.fm integration, you can have albums added to your Collection based on your listening history. The **Scrobble Threshold** determines how many plays an album needs in order to be added. For example, if the threshold is set to 50 (the default), it would automatically be added to your Collection once you've scrobbled (played any song from) the album 50 times. Go to **Account** > **Login with Last.fm** and type your username. No password is required. Then, you can select import options including your Scrobble Threshold. Local Files (Picard integration coming soon) (Dropbox/Google Drive integration coming soon) To add to your Collection from local files, it is recommended to use the command line as described below. These commands create a JSON-formatted list which you can then upload to Patrician. In the future, we will have GUI options available. Alternatively, you can use a ### Foobar2000 https://hydrogenaud.io/index.php?topic=61784.0 ### MP3Tag https://community.mp3tag.de/t/export-album-list/19168/2 ### Musicbee https://getmusicbee.com/forum/index.php?topic=15966.0 https://getmusicbee.com/forum/index.php?topic=24004.0 ### Clementine 1. Fetch missing tags from MusicBrainz 2. Upload .config/Clementine/clementine.db **Note**: Your library MUST be organized in the following way: Artist Folder > Album Folder > Audio File, otherwise Patrician will not detect the files. ### Windows ### MacOS/Linux 1. Open the Terminal app. 2. Navigate to your music library using the \"cd\" command (e.g. `cd Music`) 3. Type `ls` to make sure you are in the correct folder. You should see a list of artist folders. 4. Type this command to generate a list of artists and albums: `tree -dJ -o tree.json` 5. On Patrician, go to **Account** > **Import from Local Files**, and select the \"tree.json\" file from your music folder. 6. Select which albums you'd like to import, or click \"Select All\". ListenBrainz With Last.fm integration, you can have albums added to your Collection based on your listening history. The **Scrobble Threshold** determines how many plays an album needs in order to be added. For example, if the threshold is set to 50 (the default), it would automatically be added to your Collection once you've scrobbled (played any song from) the album 50 times. Go to **Account** > **Login with Last.fm** and type your username. No password is required. Then, you can select import options including your Scrobble Threshold. Libre.fm With Last.fm integration, you can have albums added to your Collection based on your listening history. The **Scrobble Threshold** determines how many plays an album needs in order to be added. For example, if the threshold is set to 50 (the default), it would automatically be added to your Collection once you've scrobbled (played any song from) the album 50 times. Go to **Account** > **Login with Last.fm** and type your username. No password is required. Then, you can select import options including your Scrobble Threshold. iTunes/Apple Music You can import albums from iTunes/Apple Music into your Collection by opening iTunes and going to the File menu > Library > Export Library. Then upload the XML file that was saved. Rate Your Music/Sonemic Sonemic doesn't yet currently have a public API, so Patrician can't automatically sync with this service. However, you can import albums manually from your profile: 1. Navigate to your RateYourMusic profile page. 2. At the bottom, click \"Export your data\" or \"Export with reviews\" and save this to a file. 3. On Patrician, go to **Account** > **Import from RYM/Sonemic**. 4. Select the CSV file that you saved in step 2. 5. Select which albums you'd like to import, or click \"Select All\". Discogs Coming soon. Google Play Music Coming soon. Type a list of albums Coming soon. Browsing Collections What custom search options are there? Managing Your Collections Can I make my Collection private? Private Collections are not supported at the moment. This is a feature we're currently investigating. How do I delete an album? How do I delete many albums at once (a.k.a. mass delete)? Some of my albums have incorrect metadata. Can I edit this? Profile How do I customize my public profile? How do I make album collages (like the ones people share from Tapmusic, etc)? You can generate album collages from your listening history or by searching/filtering your Collections. Note: Album collages are auto-generated upon viewing. Can I make a profile for an organization? This is not supported at the moment, but will be in the future. Social Can I follow my friends on Patrician? Yes, you can follow your friends by visiting their profiles or searching for their username. Once you've followed them, you'll see updates in your feed when they update their Collections, have new top artists, or receive recommendations. How can people recommend albums to me? How do I see a list of recommendations I've received? Someone recommended an album to me outside of Patrician. Can I manually add it to my Queue? Yes. Your inbox is a fully manageable list of albums that you intend to listen to. You can add albums to it by navigating to your Inbox and clicking \"Add\". Do people need a Patrician account to recommend albums to me? Lists How do I create a List? Can I change the visibility of my List? How do I share my List with others?","title":"Home"},{"location":"#basics","text":"What is Patrician? Patrician is a music profile app that lets you manage a collection of all the albums, EPs, and singles that you own, physical and/or digital. You can customize and share these profiles with anyone, and they will also have the ability to recommend albums to you. These are added to your queue, which you can then add to your collection. Each Patrician profile has powerful search options that allow you to narrow down your collection in a multitude of ways. You can filter and sort by release date, play count, ratings, custom tags and fields, and even compare your collection with others on the site.","title":"Basics"},{"location":"#collection","text":"","title":"Collection"},{"location":"#adding-to-your-collection","text":"Spotify With Spotify integration, you can automatically or selectively import from your Saved Albums. You can also enable Spotify Sync, which ensures that any albums added to your Collection are also saved in your Spotify library. In addition, you can manually add items from your playlists and recent listens using the Import page. To authenticate, go to **Account** > **Login with Spotify**, and once you've logged in you will see these settings: - **Import Now**: Import all Saved Albums from Spotify into your Collection. You can then choose which albums to import, or enable Sync which will automatically import everything. - **Auto Sync**: Enables two-way synchronization between Spotify and Patrician. This will occur periodically, so your libraries are always up-to-date. - **Recommendations**: Recommend recently listened albums to add to your library. These will show up on your home page. Last.fm With Last.fm integration, you can have albums added to your Collection based on your listening history. The **Scrobble Threshold** determines how many plays an album needs in order to be added. For example, if the threshold is set to 50 (the default), it would automatically be added to your Collection once you've scrobbled (played any song from) the album 50 times. Go to **Account** > **Login with Last.fm** and type your username. No password is required. Then, you can select import options including your Scrobble Threshold. Local Files (Picard integration coming soon) (Dropbox/Google Drive integration coming soon) To add to your Collection from local files, it is recommended to use the command line as described below. These commands create a JSON-formatted list which you can then upload to Patrician. In the future, we will have GUI options available. Alternatively, you can use a ### Foobar2000 https://hydrogenaud.io/index.php?topic=61784.0 ### MP3Tag https://community.mp3tag.de/t/export-album-list/19168/2 ### Musicbee https://getmusicbee.com/forum/index.php?topic=15966.0 https://getmusicbee.com/forum/index.php?topic=24004.0 ### Clementine 1. Fetch missing tags from MusicBrainz 2. Upload .config/Clementine/clementine.db **Note**: Your library MUST be organized in the following way: Artist Folder > Album Folder > Audio File, otherwise Patrician will not detect the files. ### Windows ### MacOS/Linux 1. Open the Terminal app. 2. Navigate to your music library using the \"cd\" command (e.g. `cd Music`) 3. Type `ls` to make sure you are in the correct folder. You should see a list of artist folders. 4. Type this command to generate a list of artists and albums: `tree -dJ -o tree.json` 5. On Patrician, go to **Account** > **Import from Local Files**, and select the \"tree.json\" file from your music folder. 6. Select which albums you'd like to import, or click \"Select All\". ListenBrainz With Last.fm integration, you can have albums added to your Collection based on your listening history. The **Scrobble Threshold** determines how many plays an album needs in order to be added. For example, if the threshold is set to 50 (the default), it would automatically be added to your Collection once you've scrobbled (played any song from) the album 50 times. Go to **Account** > **Login with Last.fm** and type your username. No password is required. Then, you can select import options including your Scrobble Threshold. Libre.fm With Last.fm integration, you can have albums added to your Collection based on your listening history. The **Scrobble Threshold** determines how many plays an album needs in order to be added. For example, if the threshold is set to 50 (the default), it would automatically be added to your Collection once you've scrobbled (played any song from) the album 50 times. Go to **Account** > **Login with Last.fm** and type your username. No password is required. Then, you can select import options including your Scrobble Threshold. iTunes/Apple Music You can import albums from iTunes/Apple Music into your Collection by opening iTunes and going to the File menu > Library > Export Library. Then upload the XML file that was saved. Rate Your Music/Sonemic Sonemic doesn't yet currently have a public API, so Patrician can't automatically sync with this service. However, you can import albums manually from your profile: 1. Navigate to your RateYourMusic profile page. 2. At the bottom, click \"Export your data\" or \"Export with reviews\" and save this to a file. 3. On Patrician, go to **Account** > **Import from RYM/Sonemic**. 4. Select the CSV file that you saved in step 2. 5. Select which albums you'd like to import, or click \"Select All\". Discogs Coming soon. Google Play Music Coming soon. Type a list of albums Coming soon.","title":"Adding to Your Collection"},{"location":"#browsing-collections","text":"What custom search options are there?","title":"Browsing Collections"},{"location":"#managing-your-collections","text":"Can I make my Collection private? Private Collections are not supported at the moment. This is a feature we're currently investigating. How do I delete an album? How do I delete many albums at once (a.k.a. mass delete)? Some of my albums have incorrect metadata. Can I edit this?","title":"Managing Your Collections"},{"location":"#profile","text":"How do I customize my public profile? How do I make album collages (like the ones people share from Tapmusic, etc)? You can generate album collages from your listening history or by searching/filtering your Collections. Note: Album collages are auto-generated upon viewing. Can I make a profile for an organization? This is not supported at the moment, but will be in the future.","title":"Profile"},{"location":"#social","text":"Can I follow my friends on Patrician? Yes, you can follow your friends by visiting their profiles or searching for their username. Once you've followed them, you'll see updates in your feed when they update their Collections, have new top artists, or receive recommendations. How can people recommend albums to me? How do I see a list of recommendations I've received? Someone recommended an album to me outside of Patrician. Can I manually add it to my Queue? Yes. Your inbox is a fully manageable list of albums that you intend to listen to. You can add albums to it by navigating to your Inbox and clicking \"Add\". Do people need a Patrician account to recommend albums to me?","title":"Social"},{"location":"#lists","text":"How do I create a List? Can I change the visibility of my List? How do I share my List with others?","title":"Lists"},{"location":"dev-guide/dev-setup/","text":"","title":"Local Setup"},{"location":"dev-guide/glossary/","text":"Amazon Aurora What is it? A proprietary cloud database service that has compatibility with Postgres and MySQL clients. What do we use it for? The Patrician database that stores user and item info. Alternatives: Amazon DocumentDB (if we wanted to use a MongoDB client instead), or a typical managed Postgres service like Digital Ocean Databases. AWS Lambda What is it? Cloud runtime for executing functions on-demand, either via an API endpoint or through other AWS services. What do we use it for? Nothing yet, but this is most likely where we will put the \"importer\" functions that import large libraries from Last.fm, Spotify, etc. because we don't want that work clogging up the main thread that our server runs on. Alternatives: Google Firebase Cloud Functions: This would be a nice solution, but right now it's heavily tied to Node.js, and we might eventually want to write these functions in other languages. (Lambda, by comparison, supports Java, Go, PowerShell, Node. js, C#, Python, and Ruby.) Digital Ocean Docker What is it? A virtualization tool that allows applications to run anywhere that has Docker installed. What do we use it for? I'm not 100% convinced that we need it, since Heroku can host Node.js applications without it, but this would enable our API to be very portable, and it would ease the dev experience for our team and for others who want to self-host Patrician instances. Alternatives: As of 2020, Docker is by and large an industry standard. ESLint What is it? A tool for automated \"linting\", which finds errors in our code, and in some cases attempts to auto-fix them. What do we use it for? Code checking on every commit, thanks to Husky and Lint-Staged. Alternatives: No real alternatives. Ghost What is it? A blogging platform/CMS, written in Node.js, that features an admin UI for creating accounts and writing posts. What do we use it for? Might use this for our public-facing blog where we demonstrate new app features. There's a handy Heroku installer that seems to work pretty well. Alternatives: Haven't done a huge amount of research on this yet. Wordpress would be an obvious alternative, but I'd like to use something more modern, and I really like the look and feel of Ghost in comparison. GitHub What is it? A hosting service for code that uses Git version control to keep track of history and collaboration between users. What do we use it for? Hosting all of our code, and keeping track of our tasks in the form of Issues. Alternatives: GitLab would also be an awesome choice, but GitHub is what most developers are used to (which makes it easier to find contributors), and it's also what my company uses, so it makes the most sense for this project. Hasura What is it? An open-source application that serves an autogenerated GraphQL endpoint for a Postgres database, complete with CRUD operations for all tables and integrations for server-side business logic. What do we use it for? Nothing at this point, however I was considering using this as our API instead of the Warthog application we're building. The main difference is that Hasura relies on the database layer for a lot of business logic, which would likely be faster due to Postgres's optimization. I decided against this, because it seemed like it would be a lot more work compared to our current option, and would likely allow for less customization of our business logic. Alternatives: The closest comparison to this would be Postgraphile, which I turned down for similar reasons. The alternative we've chosen for this project is our own TypeScript API that uses the Warthog framework (a wrapper for TypeORM/TypeGraphQL that reduces boilerplate and auto-generates some API functionality). Heroku What is it? A cloud platform for easily hosting applications in a number of languages/runtimes. What do we use it for? Hosting the Patrician API, and possibly our blog as well. Alternatives: There are several. The most similar to Heroku would probably be AWS Elastic Beanstalk, which also has a simple setup process. We could also self-manage a VPS using a service like Digital Ocean, or self-manage a Kubernetes cluster using EKS or Google Cloud. These are all options we can revisit at some point, but right now Heroku is the go-to for its simplicity, plugin architecture, and auto-scaling ability. Reasons to switch to something else could be for pricing, better scalability, higher speeds, integration with other services, logging, better CI/CD, and more. Husky What is it? What do we use it for? Alternatives: Jest What is it? What do we use it for? Alternatives: Last.fm What is it? What do we use it for? Alternatives: Lint-Staged What is it? What do we use it for? Alternatives: ListenBrainz What is it? What do we use it for? Alternatives: Lucene What is it? What do we use it for? Alternatives: Material Design What is it? What do we use it for? Alternatives: Material UI What is it? What do we use it for? Alternatives: MKDocs What is it? What do we use it for? Alternatives: MusicBrainz What is it? What do we use it for? Alternatives: Next.js What is it? What do we use it for? Alternatives: Notion What is it? What do we use it for? Alternatives: Now What is it? What do we use it for? Alternatives: Playwright What is it? What do we use it for? Alternatives: PostgreSQL What is it? What do we use it for? Alternatives: Prettier What is it? What do we use it for? Alternatives: Release-Drafter What is it? What do we use it for? Alternatives: Storybook What is it? What do we use it for? Alternatives: TypeGraphQL What is it? What do we use it for? Alternatives: TypeORM What is it? What do we use it for? Alternatives: TypeScript What is it? What do we use it for? Alternatives: Visual Studio Code What is it? What do we use it for? Alternatives: Warthog What is it? What do we use it for? Alternatives: ZenHub What is it? What do we use it for? Alternatives:","title":"Dev Glossary"},{"location":"dev-guide/glossary/#amazon-aurora","text":"What is it? A proprietary cloud database service that has compatibility with Postgres and MySQL clients. What do we use it for? The Patrician database that stores user and item info. Alternatives: Amazon DocumentDB (if we wanted to use a MongoDB client instead), or a typical managed Postgres service like Digital Ocean Databases.","title":"Amazon Aurora"},{"location":"dev-guide/glossary/#aws-lambda","text":"What is it? Cloud runtime for executing functions on-demand, either via an API endpoint or through other AWS services. What do we use it for? Nothing yet, but this is most likely where we will put the \"importer\" functions that import large libraries from Last.fm, Spotify, etc. because we don't want that work clogging up the main thread that our server runs on. Alternatives: Google Firebase Cloud Functions: This would be a nice solution, but right now it's heavily tied to Node.js, and we might eventually want to write these functions in other languages. (Lambda, by comparison, supports Java, Go, PowerShell, Node. js, C#, Python, and Ruby.)","title":"AWS Lambda"},{"location":"dev-guide/glossary/#digital-ocean","text":"","title":"Digital Ocean"},{"location":"dev-guide/glossary/#docker","text":"What is it? A virtualization tool that allows applications to run anywhere that has Docker installed. What do we use it for? I'm not 100% convinced that we need it, since Heroku can host Node.js applications without it, but this would enable our API to be very portable, and it would ease the dev experience for our team and for others who want to self-host Patrician instances. Alternatives: As of 2020, Docker is by and large an industry standard.","title":"Docker"},{"location":"dev-guide/glossary/#eslint","text":"What is it? A tool for automated \"linting\", which finds errors in our code, and in some cases attempts to auto-fix them. What do we use it for? Code checking on every commit, thanks to Husky and Lint-Staged. Alternatives: No real alternatives.","title":"ESLint"},{"location":"dev-guide/glossary/#ghost","text":"What is it? A blogging platform/CMS, written in Node.js, that features an admin UI for creating accounts and writing posts. What do we use it for? Might use this for our public-facing blog where we demonstrate new app features. There's a handy Heroku installer that seems to work pretty well. Alternatives: Haven't done a huge amount of research on this yet. Wordpress would be an obvious alternative, but I'd like to use something more modern, and I really like the look and feel of Ghost in comparison.","title":"Ghost"},{"location":"dev-guide/glossary/#github","text":"What is it? A hosting service for code that uses Git version control to keep track of history and collaboration between users. What do we use it for? Hosting all of our code, and keeping track of our tasks in the form of Issues. Alternatives: GitLab would also be an awesome choice, but GitHub is what most developers are used to (which makes it easier to find contributors), and it's also what my company uses, so it makes the most sense for this project.","title":"GitHub"},{"location":"dev-guide/glossary/#hasura","text":"What is it? An open-source application that serves an autogenerated GraphQL endpoint for a Postgres database, complete with CRUD operations for all tables and integrations for server-side business logic. What do we use it for? Nothing at this point, however I was considering using this as our API instead of the Warthog application we're building. The main difference is that Hasura relies on the database layer for a lot of business logic, which would likely be faster due to Postgres's optimization. I decided against this, because it seemed like it would be a lot more work compared to our current option, and would likely allow for less customization of our business logic. Alternatives: The closest comparison to this would be Postgraphile, which I turned down for similar reasons. The alternative we've chosen for this project is our own TypeScript API that uses the Warthog framework (a wrapper for TypeORM/TypeGraphQL that reduces boilerplate and auto-generates some API functionality).","title":"Hasura"},{"location":"dev-guide/glossary/#heroku","text":"What is it? A cloud platform for easily hosting applications in a number of languages/runtimes. What do we use it for? Hosting the Patrician API, and possibly our blog as well. Alternatives: There are several. The most similar to Heroku would probably be AWS Elastic Beanstalk, which also has a simple setup process. We could also self-manage a VPS using a service like Digital Ocean, or self-manage a Kubernetes cluster using EKS or Google Cloud. These are all options we can revisit at some point, but right now Heroku is the go-to for its simplicity, plugin architecture, and auto-scaling ability. Reasons to switch to something else could be for pricing, better scalability, higher speeds, integration with other services, logging, better CI/CD, and more.","title":"Heroku"},{"location":"dev-guide/glossary/#husky","text":"What is it? What do we use it for? Alternatives:","title":"Husky"},{"location":"dev-guide/glossary/#jest","text":"What is it? What do we use it for? Alternatives:","title":"Jest"},{"location":"dev-guide/glossary/#lastfm","text":"What is it? What do we use it for? Alternatives:","title":"Last.fm"},{"location":"dev-guide/glossary/#lint-staged","text":"What is it? What do we use it for? Alternatives:","title":"Lint-Staged"},{"location":"dev-guide/glossary/#listenbrainz","text":"What is it? What do we use it for? Alternatives:","title":"ListenBrainz"},{"location":"dev-guide/glossary/#lucene","text":"What is it? What do we use it for? Alternatives:","title":"Lucene"},{"location":"dev-guide/glossary/#material-design","text":"What is it? What do we use it for? Alternatives:","title":"Material Design"},{"location":"dev-guide/glossary/#material-ui","text":"What is it? What do we use it for? Alternatives:","title":"Material UI"},{"location":"dev-guide/glossary/#mkdocs","text":"What is it? What do we use it for? Alternatives:","title":"MKDocs"},{"location":"dev-guide/glossary/#musicbrainz","text":"What is it? What do we use it for? Alternatives:","title":"MusicBrainz"},{"location":"dev-guide/glossary/#nextjs","text":"What is it? What do we use it for? Alternatives:","title":"Next.js"},{"location":"dev-guide/glossary/#notion","text":"What is it? What do we use it for? Alternatives:","title":"Notion"},{"location":"dev-guide/glossary/#now","text":"What is it? What do we use it for? Alternatives:","title":"Now"},{"location":"dev-guide/glossary/#playwright","text":"What is it? What do we use it for? Alternatives:","title":"Playwright"},{"location":"dev-guide/glossary/#postgresql","text":"What is it? What do we use it for? Alternatives:","title":"PostgreSQL"},{"location":"dev-guide/glossary/#prettier","text":"What is it? What do we use it for? Alternatives:","title":"Prettier"},{"location":"dev-guide/glossary/#release-drafter","text":"What is it? What do we use it for? Alternatives:","title":"Release-Drafter"},{"location":"dev-guide/glossary/#storybook","text":"What is it? What do we use it for? Alternatives:","title":"Storybook"},{"location":"dev-guide/glossary/#typegraphql","text":"What is it? What do we use it for? Alternatives:","title":"TypeGraphQL"},{"location":"dev-guide/glossary/#typeorm","text":"What is it? What do we use it for? Alternatives:","title":"TypeORM"},{"location":"dev-guide/glossary/#typescript","text":"What is it? What do we use it for? Alternatives:","title":"TypeScript"},{"location":"dev-guide/glossary/#visual-studio-code","text":"What is it? What do we use it for? Alternatives:","title":"Visual Studio Code"},{"location":"dev-guide/glossary/#warthog","text":"What is it? What do we use it for? Alternatives:","title":"Warthog"},{"location":"dev-guide/glossary/#zenhub","text":"What is it? What do we use it for? Alternatives:","title":"ZenHub"},{"location":"user-guide/search-guide-old/","text":"Example queries Searching for a specific album: my bloody valentine loveless artist:'my bloody valentine' loveless artistId:'my-bloody-valentine-ir1' loveless id:'my-bloody-valentine-loveless' Browsing: artist:'mastodon' released-before:2009 genre:'sludge metal' list:'nostalgic-albums' tag:heavy rating-gt:8 has:review added-in:2020 plays-gt:50 Filter by rating: has:rating rating:8 rating-gt:8 rating-lt:8 Comparing collections: in:user/afantano in:user/afantano/loved-list # This is a view within a user's collection Seeing your play stats (note: you can sort by plays using the \"Sort\" dropdown menu): plays-gt:400 plays-after:2020-01-01 plays-before:2021-01-01 # Only count plays in 2020 plays-in:2020 # Same as above Combining queries: (plays-gt:400) or (tag:favorites) # > 400 plays or has tag \"favorites\" plays-gt:400 tag:favorites filter-type:or # > 400 plays or has tag \"favorites\" plays-gt:400 not:tag:favorites # > 400 and does not have tag \"favorites\" plays-gt:400 not:(tag:favorites) # > 400 and does not have tag \"favorites\" plays-gt:400 not:(tag:favorites or rating-gt:8) # > 400 and does not have tag \"favorites\" or a rating >= 8 Query Syntax Reference Overview Patrician's query syntax is a subset of the Lucene syntax, which is used in MusicBrainz and many other search engines. (It is Lucene-compatible wherever possible, but does not contain the full feature set). This means that a query can be broken into several parts: Term: The smallest unit inside a query (generally a single word). Phrase: A group of words surrounded by quotation marks, treated as a term. Operator: Special character/word that modifies how terms are handled. See Operators below. Field: An additional search category to query, denoted by a colon ( : ). E.g. tag , genre . See Filters below for a full list. Lucene Comparison List of Lucene features Feature Wildcard searches :x: Regular Expression Searches :x: Fuzzy Searches :x: Proximity Searches :x: Range Searches :question: Boosting a Term :x: Boolean Operators: OR :white_check_mark: Boolean Operators: AND :white_check_mark: Boolean Operators: + :white_check_mark: Boolean Operators: NOT :white_check_mark: Boolean Operators: - :white_check_mark: Grouping :white_check_mark: Field Grouping :white_check_mark: Escaping Special Characters :white_check_mark: Operators OR, || quotes \"-\" \"+\" tag:(tag1 tag2) Item Identifiers (These are filters that can only return one or zero items, so all other filters will be ignored) id: mbid: rymId: spotifyId: Filters [date-qualifier] = before/after/in: (YYY0s, YYYY, YYYY-MM, YYYY-MM-DD), on: (YYYY-MM-DD) \"gt\" and \"lt\" will probably equate to \"greater/less than or equal to\" instead of \"greater/less than\", because this is probably the more common use case added-[date-qualifier]: artist: artistId: first-listened-[date-qualifier]: folder: genre: has:artist-review has:favorite-tracks has:likes-dislikes has:rating has:review in:wishlist last-listened-[date-qualifier]: list: plays-gt: plays-lt: rating: rating-gt: rating-lt: released-[date-qualifier]: tag: updated-[date-qualifier]: Not Implemented Yet ([query]) or ([query]) [custom-field]: Any custom field that the user has created, along with any valid value. filter-type:or: Combines every filter using \"OR\" instead of \"AND\" get:artists/items/tracks Which type of result should be returned (default: items) in: (user/[user] or user/[user]/[view]) Whether the item also exists in another user's collection not:[filter] not:([query]) plays-[before/after]: This can be used to create a date range for plays, similar to Last.fm's functionality. (This will not be possible until we are storing play/scrobble data which is way in the future) view:[view] Whether the item exists in a view (which is basically a saved filter query)","title":"Search guide old"},{"location":"user-guide/search-guide-old/#example-queries","text":"Searching for a specific album: my bloody valentine loveless artist:'my bloody valentine' loveless artistId:'my-bloody-valentine-ir1' loveless id:'my-bloody-valentine-loveless' Browsing: artist:'mastodon' released-before:2009 genre:'sludge metal' list:'nostalgic-albums' tag:heavy rating-gt:8 has:review added-in:2020 plays-gt:50 Filter by rating: has:rating rating:8 rating-gt:8 rating-lt:8 Comparing collections: in:user/afantano in:user/afantano/loved-list # This is a view within a user's collection Seeing your play stats (note: you can sort by plays using the \"Sort\" dropdown menu): plays-gt:400 plays-after:2020-01-01 plays-before:2021-01-01 # Only count plays in 2020 plays-in:2020 # Same as above Combining queries: (plays-gt:400) or (tag:favorites) # > 400 plays or has tag \"favorites\" plays-gt:400 tag:favorites filter-type:or # > 400 plays or has tag \"favorites\" plays-gt:400 not:tag:favorites # > 400 and does not have tag \"favorites\" plays-gt:400 not:(tag:favorites) # > 400 and does not have tag \"favorites\" plays-gt:400 not:(tag:favorites or rating-gt:8) # > 400 and does not have tag \"favorites\" or a rating >= 8","title":"Example queries"},{"location":"user-guide/search-guide-old/#query-syntax-reference","text":"","title":"Query Syntax Reference"},{"location":"user-guide/search-guide-old/#overview","text":"Patrician's query syntax is a subset of the Lucene syntax, which is used in MusicBrainz and many other search engines. (It is Lucene-compatible wherever possible, but does not contain the full feature set). This means that a query can be broken into several parts: Term: The smallest unit inside a query (generally a single word). Phrase: A group of words surrounded by quotation marks, treated as a term. Operator: Special character/word that modifies how terms are handled. See Operators below. Field: An additional search category to query, denoted by a colon ( : ). E.g. tag , genre . See Filters below for a full list.","title":"Overview"},{"location":"user-guide/search-guide-old/#lucene-comparison","text":"List of Lucene features Feature Wildcard searches :x: Regular Expression Searches :x: Fuzzy Searches :x: Proximity Searches :x: Range Searches :question: Boosting a Term :x: Boolean Operators: OR :white_check_mark: Boolean Operators: AND :white_check_mark: Boolean Operators: + :white_check_mark: Boolean Operators: NOT :white_check_mark: Boolean Operators: - :white_check_mark: Grouping :white_check_mark: Field Grouping :white_check_mark: Escaping Special Characters :white_check_mark:","title":"Lucene Comparison"},{"location":"user-guide/search-guide-old/#operators","text":"OR, || quotes \"-\" \"+\" tag:(tag1 tag2)","title":"Operators"},{"location":"user-guide/search-guide-old/#item-identifiers","text":"(These are filters that can only return one or zero items, so all other filters will be ignored) id: mbid: rymId: spotifyId:","title":"Item Identifiers"},{"location":"user-guide/search-guide-old/#filters","text":"[date-qualifier] = before/after/in: (YYY0s, YYYY, YYYY-MM, YYYY-MM-DD), on: (YYYY-MM-DD) \"gt\" and \"lt\" will probably equate to \"greater/less than or equal to\" instead of \"greater/less than\", because this is probably the more common use case added-[date-qualifier]: artist: artistId: first-listened-[date-qualifier]: folder: genre: has:artist-review has:favorite-tracks has:likes-dislikes has:rating has:review in:wishlist last-listened-[date-qualifier]: list: plays-gt: plays-lt: rating: rating-gt: rating-lt: released-[date-qualifier]: tag: updated-[date-qualifier]:","title":"Filters"},{"location":"user-guide/search-guide-old/#not-implemented-yet","text":"([query]) or ([query]) [custom-field]: Any custom field that the user has created, along with any valid value. filter-type:or: Combines every filter using \"OR\" instead of \"AND\" get:artists/items/tracks Which type of result should be returned (default: items) in: (user/[user] or user/[user]/[view]) Whether the item also exists in another user's collection not:[filter] not:([query]) plays-[before/after]: This can be used to create a date range for plays, similar to Last.fm's functionality. (This will not be possible until we are storing play/scrobble data which is way in the future) view:[view] Whether the item exists in a view (which is basically a saved filter query)","title":"Not Implemented Yet"},{"location":"user-guide/search-guide/","text":"Guide Patrician's search engine is based on the Lucene query syntax, though is not feature-complete with it. For a comparison between the two, see below. Basics What to search How to search it Search for an album master of reality Search by artist artist:\"black sabbath\" Search by artist ID artistId:black-sabbath-uk1 Use multiple fields artistId:black-sabbath-uk1 released:1971 Search by ID id:black-sabbath-master-of-reality-1 mbid:e51e9779-2edc-3b39-959c-299fdb5ed940 spotifyId:7pGb2cOGVz6vLyaZaKOQ7D rymId:2277 By collection data What to search How to search it Search by tag tag:kickass-riffs Items in a list list:nostalgic-albums Items in a folder folder:vinyl Items in a view (views are saved queries) view:current-favs Items with a certain rating rating:8 rating-gt:8 rating-lt:8 Items that have been rated has:rating Items that have been reviewed has:review Items that have certain terms in the review review-contains:\"awesome\" Items that have an artist review has:artist-review Items that have favorite tracks has:favorite-tracks Items that have likes and dislikes has:likes-dislikes Items added to collection during a certain time period added-before:01/05/2019 added-after:2017/12/20 Items in wishlist in:wishlist Items that are also in another user's collection in:user/afantano Items that are also in another user's collection view in:user/afantano/loved-list By item metadata What to search How to search it Genre genre:industrial-black-metal Release date older: newer: before: after: released-before: released-after: Examples: older:2005 older:2005/05/17 older:05/17/2005 newer:2010s newer:2015/08/02 newer:08/02/2015 Listening history These require that the user has set up Last.fm or ListenBrainz integration to log their listening history. You can also sort by plays using the \"Sort\" dropdown menu, or the sort field if you're using the GraphQL API. What to search How to search it Items with certain amount of total plays plays-gt:300 plays-lt:150 Items with certain amount of total plays within a certain year plays-gt:300 plays-in:2020 Items with certain amount of total plays before a certain year plays-gt:300 plays-before:2020 Items with certain amount of total plays within a date range plays-gt:300 plays-after:2019/05/18 plays-before:2019/08/27 Items with last listened within a date range last-listened-after:2019/08/27 last-listened-after:2019 last-listened-after:2010s last-listened-before:2019/08/27 last-listened-before:2019 last-listened-before:2010s last-listened-on:2019/08/27 last-listened-in:2019 last-listened-in:2010s Items with first listened within a date range first-listened-after:2019/08/27 first-listened-after:2019 first-listened-after:2010s first-listened-before:2019/08/27 first-listened-before:2019 first-listened-before:2010s first-listened-on:2019/08/27 first-listened-in:2019 first-listened-in:2010s Operators/Symbols Operator Examples OR plays-gt:400 OR tag:favorites (plays-gt:400) OR (tag:favorites) NOT (-) plays-gt:400 NOT tag:favorites plays-gt:400 -tag:favorites + (Required. Note: Only for terms, not fields) +dark +side +of +moon (this is NOT valid or necessary) +artistId:pink-floyd-uk1 (Grouping) (plays-gt:400 OR rating-gt:8) AND tag:favorites \"Quotes\" artist:\"the dillinger escape plan\" Reference Lucene Comparison List of Lucene features Feature Wildcard searches :x: Regular Expression Searches :x: Fuzzy Searches :x: Proximity Searches :x: Range Searches :question: Boosting a Term :x: Boolean Operators: OR :white_check_mark: Boolean Operators: AND :white_check_mark: Boolean Operators: + :white_check_mark: Boolean Operators: NOT :white_check_mark: Boolean Operators: - :white_check_mark: Grouping :white_check_mark: Field Grouping :white_check_mark: Escaping Special Characters :white_check_mark:","title":"Search Guide"},{"location":"user-guide/search-guide/#guide","text":"Patrician's search engine is based on the Lucene query syntax, though is not feature-complete with it. For a comparison between the two, see below.","title":"Guide"},{"location":"user-guide/search-guide/#basics","text":"What to search How to search it Search for an album master of reality Search by artist artist:\"black sabbath\" Search by artist ID artistId:black-sabbath-uk1 Use multiple fields artistId:black-sabbath-uk1 released:1971 Search by ID id:black-sabbath-master-of-reality-1 mbid:e51e9779-2edc-3b39-959c-299fdb5ed940 spotifyId:7pGb2cOGVz6vLyaZaKOQ7D rymId:2277","title":"Basics"},{"location":"user-guide/search-guide/#by-collection-data","text":"What to search How to search it Search by tag tag:kickass-riffs Items in a list list:nostalgic-albums Items in a folder folder:vinyl Items in a view (views are saved queries) view:current-favs Items with a certain rating rating:8 rating-gt:8 rating-lt:8 Items that have been rated has:rating Items that have been reviewed has:review Items that have certain terms in the review review-contains:\"awesome\" Items that have an artist review has:artist-review Items that have favorite tracks has:favorite-tracks Items that have likes and dislikes has:likes-dislikes Items added to collection during a certain time period added-before:01/05/2019 added-after:2017/12/20 Items in wishlist in:wishlist Items that are also in another user's collection in:user/afantano Items that are also in another user's collection view in:user/afantano/loved-list","title":"By collection data"},{"location":"user-guide/search-guide/#by-item-metadata","text":"What to search How to search it Genre genre:industrial-black-metal Release date older: newer: before: after: released-before: released-after: Examples: older:2005 older:2005/05/17 older:05/17/2005 newer:2010s newer:2015/08/02 newer:08/02/2015","title":"By item metadata"},{"location":"user-guide/search-guide/#listening-history","text":"These require that the user has set up Last.fm or ListenBrainz integration to log their listening history. You can also sort by plays using the \"Sort\" dropdown menu, or the sort field if you're using the GraphQL API. What to search How to search it Items with certain amount of total plays plays-gt:300 plays-lt:150 Items with certain amount of total plays within a certain year plays-gt:300 plays-in:2020 Items with certain amount of total plays before a certain year plays-gt:300 plays-before:2020 Items with certain amount of total plays within a date range plays-gt:300 plays-after:2019/05/18 plays-before:2019/08/27 Items with last listened within a date range last-listened-after:2019/08/27 last-listened-after:2019 last-listened-after:2010s last-listened-before:2019/08/27 last-listened-before:2019 last-listened-before:2010s last-listened-on:2019/08/27 last-listened-in:2019 last-listened-in:2010s Items with first listened within a date range first-listened-after:2019/08/27 first-listened-after:2019 first-listened-after:2010s first-listened-before:2019/08/27 first-listened-before:2019 first-listened-before:2010s first-listened-on:2019/08/27 first-listened-in:2019 first-listened-in:2010s","title":"Listening history"},{"location":"user-guide/search-guide/#operatorssymbols","text":"Operator Examples OR plays-gt:400 OR tag:favorites (plays-gt:400) OR (tag:favorites) NOT (-) plays-gt:400 NOT tag:favorites plays-gt:400 -tag:favorites + (Required. Note: Only for terms, not fields) +dark +side +of +moon (this is NOT valid or necessary) +artistId:pink-floyd-uk1 (Grouping) (plays-gt:400 OR rating-gt:8) AND tag:favorites \"Quotes\" artist:\"the dillinger escape plan\"","title":"Operators/Symbols"},{"location":"user-guide/search-guide/#reference","text":"","title":"Reference"},{"location":"user-guide/search-guide/#lucene-comparison","text":"List of Lucene features Feature Wildcard searches :x: Regular Expression Searches :x: Fuzzy Searches :x: Proximity Searches :x: Range Searches :question: Boosting a Term :x: Boolean Operators: OR :white_check_mark: Boolean Operators: AND :white_check_mark: Boolean Operators: + :white_check_mark: Boolean Operators: NOT :white_check_mark: Boolean Operators: - :white_check_mark: Grouping :white_check_mark: Field Grouping :white_check_mark: Escaping Special Characters :white_check_mark:","title":"Lucene Comparison"},{"location":"user-guide/importing/basics/","text":"","title":"Basics"}]}